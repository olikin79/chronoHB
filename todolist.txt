EVOLUTIONS DEMANDEES POUR LES TRAILEURS DU RANDON :
- générer un pdf avec 6 qrcodes par page.
- faire en sorte qu'un coureur d'une catégorie puisse s'inscrire à n'importe quelle course, de distances différentes.
Ce ne serait plus la catégorie qui donnerait la course mais une propriété (à créer) du coureur.
Dans les paramètres, une checkbox permettrait de choisir "courses en fonction des catégories ou non".
Un champ Entry apparaîtrait en cas de choix "courses manuelles" qui engendrerait l'apparition d'un combobox dans ajout-modif de coureur lié à une propriété
Coureur.course, qui pourrait être importée via le tableur ou CSV.
Dans le menu "paramètres des courses", la partie gauche disparaîtrait, la partie droite prendrait alors en compte ce nouveau paramètre.
Todolist pour le cross HB 2023 :
- debug import
- email 2 possible et envoi programmé pour les deux adresses si présentes.
- envoi des emails depuis deux adresses google.
- envoi d'email avec "repondre à" différent de l'expéditeur.
- depot vers serveur sftp
- affichage actualisé non défilant.
- deplacer les fichiers du serveur web dans www



Todolist pour version 1.8 (mai 2023) :

- Idéalement, les dossards coderaient 1A, 2A, 3A pour la première course, 1B, 2B, ... pour la 2ème course. 
Coureurs deviendrait un dictionnaire {A:[Coureur 1A, Coureur 2A,...],B:[coureur 1B, ...],...}
Même schéma pour ArriveeTemps, ArriveeTempsAffectes, ArriveeDossards, 

=======
Bugs détectés :
- non application des paramètres renseignés, sauf à relancer l'application. A Trouver.
- les paramètres des boutons radio (type de course,...) ne sont pas mémorisés immédiatement 
(ni appliqués du coup : cases à cocher non prises en compte sans redémarrage de l'application)).
- le bind sur la saisie dans un champ Entry ne s'exécute qu'à la sortie de ce champ et non à chaque caractère saisi.
Si on ne quitte pas le champ, la valeur n'est pas mémorisée en mémoire. Exemple pour les noms de course personnalisés.
- (confirmé) : l'archivage contient-il les vidéos ? on dirait que non!

Fonctionnalités :
- ajouter les paramètres généraux, déjà documentés : 
	* relatifs à l'envoi automatique de diplomes, les logins et mdp d'emails, le nombre de minutes de rétention avant l'envoi des diplomes.
	* relatifs à l'affichage TV automatique ?
	* relatifs au dépôt FTP pour site web en temps réel. (rajouter le lien dans le mail diffusé)
- refaire les captures d'écran p5 de la documentation.
- tester-simuler les conditions d'échec d'envoi d'un mail avec le diplome. Améliorer éventuellement la détection d'erreur.

Si possible pour la 1.8 :
- l'affichage de la TV disponible sur un site web (sans défilement automatique), dont le lien serait transmis par mail + QR-code dans la salle.
- processus de mise à jour testé, permettant de remplacer n'importe quel fichier de chronoHB même si non encore utilisé et non implémenté.
- import + export en .chb des fichiers de données.
- créer une case à cocher pour bloquer l'envoi des emails. La décocher systématiquement au redémarrage de chronoHB.
- variable "message dans le mail" : bravo pour ta participation !


Documentation :
- documenter : double authentification google.com + mot de passe d'application.
- documenter l'inscription en ligne via formulaire google form.
- documenter l'import avec le numéro de dossard fourni.


Trouver win32ui installation. https://stackoverflow.com/questions/42370339/python-3-6-install-win32api

#####################################################

Todolist pour version 1.9 (oct 2023) :

Bugs détectés :
- (très improbable, peut être reporté): 
importer les fichiers de données venant des smartphones en parallèle en fonction de l'heure d'arrivée sur le serveur de l'information.
Cela permettra d'obtenir forcément les mêmes données après réimport ou reboot du logiciel.

- Selon la taille des noms des catégories, les cases à cocher pour l'affichage TV débordent de l'écran. Faire en sorte que cela soit adaptatif.
Créer un affichage qui dépend de la longueur totale à afficher avec retour à la ligne.
Actuellement, on coupe en deux lignes les combobox. Il faudrait pouvoir faire plus de deux lignes en fonction de la largeur de 
la fenêtre parent en pixels.

- vérifier que le classement s'effectue à l'intérieur d'une catégorie : un M2 n'est pas en concurrence avec un M3, etc... Surtout pour le Randon Trail.

Fonctionnalités :
- Inscription en ligne avec case à cocher : trouver un moyen de cacher périodiquement les lignes "payées" 
et de pouvoir "tout afficher" avec une case à cocher, qui restera toujours visible.
Ainsi, les opérateurs ne voient que les dossards qui restent à donner.
- Inscription en ligne : envoi d'un email automatique aux inscrits avec leur numéro de dossard, la couleur et l'indication "Donner votre nom et indiquez que vous avez le dossard "23 vert".
- Installation automatique de l'ensemble dont extensions installées localement.
- Faire en sorte que l'import de dossards depuis un autre smartphone soit automatiquement considéré comme une autre pic.
Chaque smartphone sera considéré comme une pix différente. Le premier smartphone à envoyer des données sera la pic de base importée
ArriveesDossards sera complété par des propriétés et méthodes  :
La documentation spécifiera que : le premier dossard scanné avec un smartphone "pic" (qui n'est pas celui de base) devra être :
* un dossard (quelconque du smartphone principal)
* ou le dernier dossard d'un autre smartphone "pic".
Le dernier dossard d'un smartphone "pic" devra être :
* un dossard (quelconque du smartphone principal) : auquel cas, tous les dossards du smartphone "pic" s'insèrent dans la liste.
* le premier dossard d'un smartphone "pic"
Ainsi, on pourra utiliser les pics pour intercaler au milieu des scans du smartphone principal 
ou pour enchainer les smartphones (si panne de batterie ou autre)

- Le status dispensé ou absent devrait être cumulable : élimination du combobox et utilisation de cases à cocher.
Attention à répercuter ces éventuels deux status dans les pdf générés et dans le tableur xls si tel est le cas.
La class Coureur() permet déjà le cumul, je pense...

- changer les fichiers textes avec une extension comme .dbc (pour db de chronoHB) afin d'ignorer dans GIT tous les fichiers chb... Plus pratique !



Fonctionnalités pour le cross UNSS :
- créer une méthode pour récupérer le numéro d'AS de chaque coureur (à partir de son numéro de licence). 
Cela devrait permettre un export (copier-coller) vers OPUSS de la forme (combien de qualifiés par catégorie ?):
1	14771	1	6 pts (1+2+1+2+0)	Q
2	14771	2	14 pts (3+4+3+4+0)	Q
3	14785		28 pts (8+9+5+6+0)	
4	14758		30 pts (6+7+8+9+0)	

...
Voir à quoi correspond le Q.
- pour l'UNSS, export par établissement avec les catégories distinguées dans des tableaux divers du même pdf.


BUGS RESTANTS dans chronoHB :
PRIORITAIRES :



MOYENNEMENT PRIORITAIRES :
- rendre scrollable les frames d'impressions de dossards individuelles ou des absents-dispensés.

- rajouter une coche sur l'affichage TV lorsque le premier coureur de la course en question est scanné. 
Cela permettrait de pallier les oublis de l'opérateur.

- pour un cross UNSS, dans le tableau de l'affichage TV, la colonne "établissement" n'est pas assez large.

- sur le smartphone, quand un dossard a déjà été scanné, il faudrait pouvoir supprimer facilement toutes les occurences précédentes.
Cela se produit quand un dossard est scanné par erreur puis supprimé sur le serveur chronoHB. Ensuite, quand on doit le scanner pour de vrai, 
c'est bloquant. Il faudrait "sortir du mode scan si on y est / afficher un message "voulez vous supprimer le scan précédent de ce dossard ? OUI / NON"
puis agir si besoin puis revenir à l'écran classique.

- un paramètre comme le changement de type de dossard ne s'actualise qu'après un redémarrage de l'application. Bug confirmé à corriger.

- (confirmé) : on modifie le nom d'un groupement et on demande son affichage sur la TV en cochant la case
correspondant. Cela provoque un bug... Redémarrer chronoHB résout le bug.

- (à tester) : la compatibilité ascendante avec d'anciennes sauvegardes à tester. Pas assurée... 
Exemple : réimport du cross HB 2022 dans la version 1.62

- (à tester) : l'archivage contient-il les vidéos ? on dirait que non!


NON PRIORITAIRES :
- FONCTIONNELS : si on remplit le tableau avec quelques temps puis on le vide, on constate le bug suivant :
si on supprime d'un coup plusieurs lignes, elles disparaissent effectivement de l'affichage.
si on ne supprime qu'une seule ligne, alors elle persiste dans l'affichage (mais pas dans la base, ce qui fait qu'un nouveau lancement du logiciel
ou un nouveau temps ajouté ensuite la font disparaître.

- Le status dispensé ou absent devrait être cumulable : élimination du combobox et utilisation de cases à cocher.
Attention à répercuter ces éventuels deux status dans les pdf générés et dans le tableur xls si tel est le cas.
La class Coureur() permet déjà le cumul, je pense...

- Selon la taille des noms des catégories, les cases à cocher pour l'affichage TV débordent de l'écran. Faire en sorte que cela soit adaptatif.
Créer un affichage qui dépend de la longueur totale à afficher avec retour à la ligne. Actuellement, on coupe en deux les combobox.

- changer les fichiers textes de db en une extension comme chb (pour chronoHB) afin d'ignorer dans GIT tous les fichiers chb... Plus pratique !


- ULTRA-PEU-PROBABLE (ignoré lors de l'implémentation de l'UNSS) :
	* si on est en présence d'une course UNSS, qu'il n'y a que des cadets G et des juniors F (ou l'inverse), le challenge Lycée ne sera pas créé.
Cela ne peut pas survenir vu qu'il y a toujours des cadets, cadettes, juniors et juniores sur une compétition UNSS.
S'il n'y a que des cadets et cadettes, tout fonctionne (idem si juniors et juniores).
Compliqué de gérer ce cas improbable en pratique, vu que le challenge lycée regroupe les catégories CA et JU, qui peuvent être filles ou
garçons et que son nom ne correspond pas aux catégories officielles des courses courues.

	* si on est en présence d'une course UNSS, qu'un coureur M10 (vétéran dernière catégorie) courre avec les jeunes de lycée, 
alors celui-ci pourra entrer dans n'importe quel challenge sans limitation. Cela vient du fait que M10 comporte 3 caractères contrairement à
toutes les catégories. Pas créé de cas particulier pour cette éventualité (qui ne peut pas survenir en pratique).


- ESTHETIQUE :
	* les boutons des vidéos ne se déplacent pas vers le haut ou le bas quand la scrollbar de monTableau est utilisée 
		(ou se décale toute seule avec les nouvelles arrivées)
	* si on annule toutes les courses, le menu "Annuler" ne disparaît pas. Esthétique !
	* dans le pdf qui affiche les résultats d'un groupement, quand la colonne vitesse n'est pas assez large,
	( cas où il y a la vitesse et la VMA ),  les éléments ne sont pas centrés correctement.
	* la droiteFrame devrait être munie d'un scroll haut-bas afin de gérer le cas où les éléments affichés sont trop nombreux. 
	Non réussi avec la class dérivée de Frame présente en début de code de chronoHB.py
	* si un temps est entre minuit et 1H, lors de la fermeture de l'application, le temps affiché est incorrect.
	Aucun impact sur les temps calculés et les statistiques. 
	Impact sur l'affichage TV sur le chronomètre en temps réel affiché en haut ? A vérifier.
	Exemple : 00:44:20:34 devient, après fermeture puis ouverture de l'application 44:20:34.

	


A TESTER :




FONCTIONNALITES MANQUANTES dans chronoHB.py à plus long terme :

	
MOYENNEMENT PRIORITAIRE :
- remplacer l'usage de xlswriter par openpyxl lors de l'export => possibilité d'éliminer cette dépendance.
- mise en page du tableau par catégories dans les statistiques : inutile de distinguer le sexe dans deux colonnes.
Cela a sa raison d'être pour les groupements ou pour les classes (qui sont dans Resultats, à maintenir) mais pas pour les catégories (également dans Résultats).
- accepter la pondération pour les challenges par classe.
- le défilement automatique de MonTableau ne s'effectue que par blocs de 2 lignes.
- trouver les différentes fonctions d'actualisation de l'interface GUI. Il semble y avoir 3 qui font sûrement doublon. A réfléchir.
Source d'incompréhension en cas de bizarreries d'affichage potentielles. Pas de bug constaté pour l'instant.
- prévoir une procédure en cas de plantage au démarrage lié à une base de données incorrecte.
try : except : dans le traitement des données afin d'éviter une interface plantée comme ci-après :
Traceback (most recent call last):
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1866, in <module>
    timer=Clock(root, "tableau.maj")
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1765, in __init__
    self.update_clock()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1776, in update_clock
    traitementLocal = traiterDonneesLocales()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1162, in traiterDonneesLocales
    codeErreur = decodeActionsRecupSmartphone(ligne, local=True)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1231, in decodeActionsRecupSmartphone
    retour = addArriveeDossard(dossard, dossardPrecedent)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 2747, in addArriveeDossard
    coureur = Coureurs[doss-1]
IndexError: list index out of range

Devrait lancer recupererSauvegardeGUI() en cas de plantage afin de charger une base correcte.


A PLUS LONG TERME :
- permettre d'afficher sur la TV les vidéos : dans la zone d'affichage, développer un combobox qui affichera
les noms des dossards concernés (théoriquement) par un enregistrement qu'il serait possible de cocher pour diffusion sur la TV.
Placer cette diffusion au tout début de la page web, avant les tableaux. Cela permettrait de palier toute demande 
de vérification et de laisser les coureurs concernés loin des installations.
- faire en sorte que les numéros de la première colonne du tableauGUI soient systématiquement avec le bon nombre de chiffres
(interne à la class tableauGUI) si moins de 100 résultats : à deux chiffres. Si moins de mille résultats, à trois chiffres, etc...
Ainsi, quand on effectue un tri par colonne, actuellement, j'ai mis 3 chiffres tout le temps. Développement court qui devra se baser sur la méthode formateSurNChiffres() 
en déterminant le nombre total de lignes et on l'appliquant à posteriori à tout le tableau quand ce total dépassera 100, 1000, etc...
- dans ajout manuel de coureur, la classe devrait être une liste combobox avec les classes précédentes mais permettant de saisir une nouvelle classe.
- pouvoir choisir l'imprimante vers laquelle on imprime dans les paramètres.
- quand MonTableau contient plus de 10 colonnes, impossible d'éditer une cellule au delà de la 10ème : problème de base 16 à convertir en base 10 (ou l'inverse, car écrit de mémoire...)
(Inutile en l'état actuel des besoins)
- l'affichage.html pourrait être exporté à chaque actualisation vers un serveur ftp sur le web (identifiants+mdp+adresse à renseigner dans les paramètres).
Ainsi, n'importe quel autre ordintateur relié à internet, plus lointain (sans wifi), pourrait afficher les résultats.
Actuellement, il faut que le deuxième ordinateur soit sur le même réseau wifi pour afficher la page http://ip-serveur-chronoHB/Affichage.html .
- si la génération des dossards (ou des résultats ou du xlxs) échouent, c'est probablement lié à un fichier ouvert dans adobe reader ou excel. 
	Inviter l'utilisateur à fermer ces logiciels par un pop-up.
- possibilité de configurer les dossards générés : possibilité de trier les coureurs du listing par ordre alphabétique (et non par création=> dossard, comme actuellement)
d'imprimer les dossards par groupements, catégories, classes avec des cases à cocher dans un menu dédié...
- dans les paramètres, permettre de changer l'option : "statistiques en % ou en effectifs".
- Ajouter un mode sombre via l'interface (case à cocher) pour utiliser la css mode-sombre. 
- segmenter le code pour séparer les classes de données (AVANT DE DIFFUSER REELLEMENT LE LOGICIEL)
- Créer un système évitant des incohérences entre les smartphones et la base locale : 
un numéro de course unique qui empêcherait toute communication tant que les données n'ont pas été coordonnées ou celles du smartphone effacées.
A réfléchir...
