A tester dans chronoHB :
- vers la ligne 3203 de chronoHB.pyw, chercher le commentaire "### A tester..." : 
il faudra tester le menu d'ajout de coureur pour les quatre types de catégories d'âge (0, 1 en mode manuel ou automatique et 2) afin 
de vérifier que les critères de validation d'une saisie soient corrects et que les boutons s'affichent pour toutes les saisies correctes
et uniquement celles-ci.


Retour suite au trail de Randon :
- Améliorer le fichiers LOG d'import en mettant mieux en évidence les erreurs par rapport aux imports réussis.
- voir pourquoi la vitesse de défilement n'est pas uniforme : 
pour une vitesse fixée, quand il y a peu de gens, cela défile vite et quand il y a plus de monde, cela défile plus doucement.
A creuser pour obtenir une vitesse uniforme.
- un dossard "1AA" saisi sur le smartphone provoque un bug.


A tester suite trail Rieutort :
- plusieurs imports successifs ne semblent pas avoir le bon comportement. Certains coureurs sont actualisés (alors qu'ils n'ont pas changé).


Pour déploiement et vente du logiciel :
- mettre au point script de mise à jour de chronoHB.
- créer un système web avec base de donnée permettant de valider une installation sur un poste : 
	* création d'un identifiant unique associé au poste (associé à l'adresse MAC de la carte réseau et à un code unique : md5 de la concaténation des deux ?)
	* création d'une page de validation de l'installation : la requête contiendrait le code à usage unique et lUUID unique (adresse mac par exemple).
	La page en question valide le code (si présent dans la BDD sans adresse mac) et invalide celui-ci si adresse mac déjà renseignée.
	* possibilité de désinstaller le logiciel d'un poste pour le copier sur un autre en recrédidant le compte via une requête particulière.
- au lancement, vérifie que l'installation de chronoHB est valide (via internet). Mémorise la date de la dernière vérification.
Voir quelle période de sursis on laisse sans accès au web ? 1 an ? Signaler dans la documentation ce délai
Si l'accès à internet n'est pas fonctionnel, signale le délai restant au lancement.
Si délai dépassé, introduit des restrictions pour mode démo (20 coureurs dans la base et passent la ligne max). Tous les autres menus actifs et fonctionnels.

	
BUGS RESTANTS dans chronoHB (indépendants du passage aux nouveaux numéros de dossards) :
PRIORITAIRES :
- le bind sur la saisie dans un champ Entry ne s'exécute qu'à la sortie de ce champ et non à chaque caractère saisi.
Si on ne quitte pas le champ, la valeur n'est pas mémorisée en mémoire.

- les paramètres des boutons radio (type de course,...) ne sont pas mémorisés immédiatement 
(ni appliqués du coup : cases à cocher non prises en compte sans redémarrage de l'application)).

- trouver pourquoi une erreur est généré par setARegenererPourImpression() , liée à l'usage des noms standards en arrière plan (rendue non bloquante)





DEVELOPPEMENTS :
MOYENNEMENT PRIORITAIRES :
- moyen de déploiement de mises à jour de chronoHB sur des postes déjà déployés.

- rendre scrollable les frames d'impressions de dossards individuelles ou des absents-dispensés.

- actualisation automatique de l'affichage sur la TV (même fréquence que les sauvegardes) en fonction des derniers coureurs arrivés :
	* si le dernier coureur d'une course est passé il y a plus de 5 min, on décoche.
	* si un coureur d'une course passe la ligne, on coche.
	
- sur le smartphone, quand un dossard a déjà été scanné, il faudrait pouvoir supprimer facilement toutes les occurences précédentes.
Cela se produit quand un dossard est scanné par erreur puis supprimé sur le serveur chronoHB. Ensuite, quand on doit le scanner pour de vrai, 
c'est bloquant. Il faudrait "sortir du mode scan si on y est / afficher un message "voulez vous supprimer le scan précédent de ce dossard ? OUI / NON"
puis agir si besoin puis revenir à l'écran classique.

- un paramètre comme le changement de type de dossard ne s'actualise qu'après un redémarrage de l'application. Bug confirmé à corriger.

- (à tester) : la compatibilité ascendante avec d'anciennes sauvegardes à tester. Pas assurée... 
Exemple : réimport du cross HB 2022 dans la version 1.62

- (confirmé) : l'archivage contient-il les vidéos ? on dirait que non!



MOYENNEMENT PRIORITAIRES Cross UNSS :
- pour l'UNSS, export par établissement avec les catégories distinguées dans des tableaux divers du même pdf.
- export vers OPUSS à créer à partir d'un modèle.
- pour un cross UNSS, dans le tableau de l'affichage TV, la colonne "établissement" n'est pas assez large.


DEVELOPPEMENTS NON PRIORITAIRES :
- FONCTIONNELS :
- Le status dispensé ou absent devrait être cumulable : élimination du combobox et utilisation de cases à cocher.
Attention à répercuter ces éventuels deux status dans les pdf générés et dans le tableur xls si tel est le cas.
La class Coureur() permet déjà le cumul, je pense...

- Selon la taille des noms des catégories, les cases à cocher pour l'affichage TV débordent de l'écran. Faire en sorte que cela soit adaptatif.
Créer un affichage qui dépend de la longueur totale à afficher avec retour à la ligne. Actuellement, on coupe en deux les combobox.

- changer les fichiers textes de db en une extension comme chb (pour chronoHB) afin d'ignorer dans GIT tous les fichiers chb... Plus pratique !

- l'optimisation de la non regénération des pdf n'a pas lieu pour les courses manuelles. Il faudrait reprendre la ligne env .2575 de generateImpressions()
casOuOnSupprime = (aSupprimer) \
                          or (nomFichierPdfDecoupe[0] == "Categorie" and Courses[nomFichierPdfDecoupe[1]].aRegenererPourImpression) \
                          or (nomFichierPdfDecoupe[0] == "Groupement" and groupementAPartirDeSonNom(Courses[nomFichierPdfDecoupe[1]].nomGroupement, nomStandard = True).aRegenererPourImpression) \
                          or nomFichierPdfDecoupe[0] == "Challenge" or nomFichierPdfDecoupe[0]=="statistiques"
et utiliser le nom au lieu du nom standard... Quelle incidence sur le reste ?




- ULTRA-PEU-PROBABLE (ignoré lors de l'implémentation de l'UNSS) :
	* si on est en présence d'une course UNSS, qu'il n'y a que des cadets G et des juniors F (ou l'inverse), le challenge Lycée ne sera pas créé.
Cela ne peut pas survenir vu qu'il y a toujours des cadets, cadettes, juniors et juniores sur une compétition UNSS.
S'il n'y a que des cadets et cadettes, tout fonctionne (idem si juniors et juniores).
Compliqué de gérer ce cas improbable en pratique, vu que le challenge lycée regroupe les catégories CA et JU, qui peuvent être filles ou
garçons et que son nom ne correspond pas aux catégories officielles des courses courues.

	* si on est en présence d'une course UNSS, qu'un coureur M10 (vétéran dernière catégorie) courre avec les jeunes de lycée, 
alors celui-ci pourra entrer dans n'importe quel challenge sans limitation. Cela vient du fait que M10 comporte 3 caractères contrairement à
toutes les catégories. Pas créé de cas particulier pour cette éventualité (qui ne peut pas survenir en pratique).


- ESTHETIQUE :
	* si on annule toutes les courses, le menu "Annuler" ne disparaît pas. Esthétique !
	* dans le pdf qui affiche les résultats d'un groupement, quand la colonne vitesse n'est pas assez large,
	( cas où il y a la vitesse et la VMA ),  les éléments ne sont pas centrés correctement.
	* la droiteFrame devrait être munie d'un scroll haut-bas afin de gérer le cas où les éléments affichés sont trop nombreux. 
	Non réussi avec la class dérivée de Frame présente en début de code de chronoHB.py
	* si un temps est entre minuit et 1H, lors de la fermeture de l'application, le temps affiché est incorrect.
	Aucun impact sur les temps calculés et les statistiques. 
	Impact sur l'affichage TV sur le chronomètre en temps réel affiché en haut ? A vérifier.
	Exemple : 00:44:20:34 devient, après fermeture puis ouverture de l'application 44:20:34.

	


A TESTER :




FONCTIONNALITES MANQUANTES OU EVOLUTIONS dans chronoHB.py à plus long terme :

- remplacer l'usage de xlswriter par openpyxl lors de l'export => possibilité d'éliminer cette dépendance.
- mise en page du tableau par catégories dans les statistiques : inutile de distinguer le sexe dans deux colonnes.
Cela a sa raison d'être pour les groupements ou pour les classes (qui sont dans Resultats, à maintenir) mais pas pour les catégories (également dans Résultats).
- accepter la pondération pour les challenges par classe.
- le défilement automatique de MonTableau ne s'effectue que par blocs de 2 lignes.
- trouver les différentes fonctions d'actualisation de l'interface GUI. Il semble y avoir 3 qui font sûrement doublon. A réfléchir.
Source d'incompréhension en cas de bizarreries d'affichage potentielles. Pas de bug constaté pour l'instant.
- prévoir une procédure en cas de plantage au démarrage lié à une base de données incorrecte.
try : except : dans le traitement des données afin d'éviter une interface plantée comme ci-après :
Traceback (most recent call last):
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1866, in <module>
    timer=Clock(root, "tableau.maj")
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1765, in __init__
    self.update_clock()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1776, in update_clock
    traitementLocal = traiterDonneesLocales()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1162, in traiterDonneesLocales
    codeErreur = decodeActionsRecupSmartphone(ligne, local=True)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1231, in decodeActionsRecupSmartphone
    retour = addArriveeDossard(dossard, dossardPrecedent)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 2747, in addArriveeDossard
    coureur = Coureurs[doss-1]
IndexError: list index out of range

Devrait lancer recupererSauvegardeGUI() en cas de plantage afin de charger une base correcte.


A ENCORE PLUS LONG TERME : quelques idées en vrac.
- permettre d'afficher sur la TV les vidéos : dans la zone d'affichage, développer un combobox qui affichera
les noms des dossards concernés (théoriquement) par un enregistrement qu'il serait possible de cocher pour diffusion sur la TV.
Placer cette diffusion au tout début de la page web, avant les tableaux. Cela permettrait de palier toute demande 
de vérification et de laisser les coureurs concernés loin des installations.
- faire en sorte que les numéros de la première colonne du tableauGUI soient systématiquement avec le bon nombre de chiffres
(interne à la class tableauGUI) si moins de 100 résultats : à deux chiffres. Si moins de mille résultats, à trois chiffres, etc...
Ainsi, quand on effectue un tri par colonne, actuellement, j'ai mis 3 chiffres tout le temps. Développement court qui devra se baser sur la méthode formateSurNChiffres() 
en déterminant le nombre total de lignes et on l'appliquant à posteriori à tout le tableau quand ce total dépassera 100, 1000, etc...
- dans ajout manuel de coureur, la classe devrait être une liste combobox avec les classes précédentes mais permettant de saisir une nouvelle classe.
- pouvoir choisir l'imprimante vers laquelle on imprime dans les paramètres.
- quand MonTableau contient plus de 10 colonnes, impossible d'éditer une cellule au delà de la 10ème : problème de base 16 à convertir en base 10 (ou l'inverse, car écrit de mémoire...)
(Inutile en l'état actuel des besoins)
- l'affichage.html pourrait être exporté à chaque actualisation vers un serveur ftp sur le web (identifiants+mdp+adresse à renseigner dans les paramètres).
Ainsi, n'importe quel autre ordintateur relié à internet, plus lointain (sans wifi), pourrait afficher les résultats.
Actuellement, il faut que le deuxième ordinateur soit sur le même réseau wifi pour afficher la page http://ip-serveur-chronoHB/Affichage.html .
- si la génération des dossards (ou des résultats ou du xlxs) échouent, c'est probablement lié à un fichier ouvert dans adobe reader ou excel. 
	Inviter l'utilisateur à fermer ces logiciels par un pop-up.
- dans les paramètres, permettre de changer l'option : "statistiques en % ou en effectifs".
- Ajouter un mode sombre via l'interface (case à cocher) pour utiliser la css mode-sombre. 
- segmenter le code pour séparer les classes de données (AVANT DE DIFFUSER REELLEMENT LE LOGICIEL)
- Créer un système évitant des incohérences entre les smartphones et la base locale : 
un numéro de course unique qui empêcherait toute communication tant que les données n'ont pas été coordonnées ou celles du smartphone effacées.
A réfléchir...
