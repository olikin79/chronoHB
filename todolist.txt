BUGS RESTANTS dans chronoHB :
PRIORITAIRES :
1. Tester si ce bug persiste : impossible de supprimer un temps dans l'interface GUI qui ne serait pas de la date du jour. 
Il est sûrement encore présent puisque tableauGUI ne contient pas l'information. 
MODIFIER formateLigneGUI pour ajouter cette information puis l'interface pour l'exploiter.
Il faudra ajouter le temps précis en bout de tableauGUI pour que l'interface puisse connaître le temps GMT depuis epoch exact à supprimer.

2. le rang ne s'ajoute plus dans le tableau affiché au fur et à mesure des remontées du smartphone, sauf en cas de redémarrage de l'application serveur.
Normal dans le processus actuel : 
	1. on rapproche les temps des dossards dans traiterDonneesSmartphone() dans lequel on génère le tableauGUI (rang inconnu à ce stade)
	2. on calcule tous les rangs, le challenge dans la fonction dédié.
	3. on lance l'actualisation de l'affichage avec maj(tableauGUI)
	
	Il faudrait alimenter le tableau GUI (actuellement fait dans calculeTousLesTemps()) plus tard, à la fin de calculeResultatCoursesEtClasses()

3. la génération du pdf aImprimer.pdf non fonctionnelle 
alors que le .tex est généré correctement et que les autres compilations de dossards fonctionnent.

4. Lorsque l'on affecte un dossard à un temps dans l'interface, cela ne s'actualise plus... sauf à relancer tout le processus de calcul.



NON PRIORITAIRES :
- dans l'application android : si ajout multiple + affectation sur smartphone => dossard affecté au dernier et non au premier.
Très peu probable en condition réelle car, avec un groupe, on ne peut anticiper qui sera le premier du groupe.

- dans l'interface, si on "ajoute un dossard après" un déjà arrivé, pour lequel il y a un temps disponible à la fin de la liste, que le départ est donné,
mais que le temps est négatif, le dossard et le temps disparaissent de l'interface. Erreur à gérer...
Bug confirmé si le temps est négatif et que la course est partie mais après le temps d'arrivée associé

- si en cours de course, on crée un coureur dans une catégorie qui n'existe pas encore. Qu'ensuite, on regroupe cette catégorie avec une 
dont le départ a déjà été donné. Alors le départ dans cette nouvelle catégorie devrait être donné (ce n'est pas fait) et l'affichage 
actualisé pour en tenir compte. (BUG TORDU MAIS POSSIBLE DANS L'URGENCE D'UNE COURSE)



A TESTER :
- vérifier si un ascenceur existe dans la combobox de modification d'un coureur quand il y en a beaucoup.
Dans le cas contraire, un champ Entry sera peut-être nécessaire.

- est ce que Coureurs.txt est regénéré à chaque démarrage par rapport à la base de données
 A faire si ce n'est pas le cas (pour que les sauvegardes et récupérations soient niquels)

- trouver les différentes fonctions d'actualsation de l'interface GUI. Il semble y avoir 3 qui font sûrement doublon. A réfléchir.
Source d'incompréhension en cas de bizarreries d'affichage potentielles. Pas de bug constaté pour l'instant.


FONCTIONNALITES MANQUANTES dans chronoHB.py :
PRIORITAIRES :
- mettre l'heure exacte à la seconde de l'ordinateur quelque part sur l'interface. 
L'opérateur qui est sur le serveur et qui voit passer un coureur peut ensuite associer ce temps vu à celui qui va apparaître mesuré 
par l'opérateur sur le premier smartphone. Cela décharge ce dernier qui va voir arriver plein de coureurs et n'a souvent pas le temps
d'effectuer l'association du premier coureur d'une course avec son temps.

- permettre l'export et l'import d'une base de données. Quid de la sauvegarde et du réimport des donneesSmartphones.txt (cohérence finale?):
le smartphone pourrait mémoriser les diverses sauvegardes successives avec un numéro de course (requête HTTP sur le serveur) : 
	* propose une liste vide si nouvelle course.
	* réimporte les saisies initiales si ancienne course
	Tout en automatique 
	L'accès à l'écran de saisie serait conditionné au fait que le serveur serait joignable. Utile ? car bloquant en cas de panne temporaire du serveur.
	Sinon, un message indiquerait que l'on continue avec la base actuelle. Pas bloquant.
	
- prévoir une procédure en cas de plantage au démarrage try : except : dans le traitement des données afin d'éviter une interface plantée comme ci-après :
Traceback (most recent call last):
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1866, in <module>
    timer=Clock(root, "tableau.maj")
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1765, in __init__
    self.update_clock()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1776, in update_clock
    traitementLocal = traiterDonneesLocales()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1162, in traiterDonneesLocales
    codeErreur = decodeActionsRecupSmartphone(ligne, local=True)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1231, in decodeActionsRecupSmartphone
    retour = addArriveeDossard(dossard, dossardPrecedent)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 2747, in addArriveeDossard
    coureur = Coureurs[doss-1]
IndexError: list index out of range

Devrait lancer recupererSauvegardeGUI() en cas de plantage.
	

MOYENNEMENT PRIORITAIRE :
- Faire en sorte que l'on puisse affecter un dossard à un temps (que cela fonctionne toujours) et que l'Entry apparaisse au bon endroit. 
Faire des tests avec une très grande série de données comme celle du cross pour recalculer la fonction affine qui va bien (trop arrondi actuellement).
- mettre à jour la documentation avec les nouveautés de 2021-2022 + documenter la mise en plein écran sur l'affichage secondaire (raccourcis claviers).
- possibilité de compiler les dossards de chaque course séparément: utile finalement après massicot de ce jour ! 
Tant pis si on perd une demi-page une fois sur deux.


A PLUS LONG TERME :
- permettre la modification de la catégorie d'un coureur manuellement. Est ce vraiment utile ?
Actuellement, les catégories sont automatiquement générées à partir de la date de naissance ou de la classe (suivant la configuration).
On peut déjà changer la date de naissance ou la classe d'appartenance (quitte à en inventer une) pour changer indirectement la catégorie d'un coureur.
La class Coureur contient déjà les méthodes pour définir une catégorie manuellement. Méthodes non utilisées dans l'interface GUI actuellement.
Quid d'un réimport SIECLE : doit il écraser la catégorie fixée manuellement ? Oui ?
- l'affichage.html pourrait être exporté à chaque actualisation vers un serveur ftp sur le web (identifiants+mdp+adresse à renseigner dans les paramètres).
Ainsi, n'importe quel autre ordintateur relié à internet, plus lointain, pourrait afficher les résultats.
Actuellement, il faut que le deuxième ordinateur soit sur le même réseau wifi pour afficher la page http://ip-serveur-chronoHB/Affichage.html .
- vitesse de défilement réglable par une entryParam sur l'application = > Prévoir un intervalle de validité.
	 Actuellement, les données saisies ne sont pas vérifiées, ce qui peut planter la page web (pas dramatique)
	une vérificaiton optionnelle isnumeric dans la classe "EntryParam" avec un intervalle de validité sera suffisant 
- photo finish à l'arrivée automatiques et accessible depuis l'interface GUI
- si la génération des dossards (ou des résultats ou du xlxs) échouent, c'est probablement lié à un fichier ouvert dans adobe reader ou excel. 
	Inviter l'utilisateur à fermer ces logiciels par un pop-up.
- possibilité de configurer les dossards générés : possibilité de trier les coureurs du listing par ordre alphabétique (et non par création=> dossard, comme actuellement)
d'imprimer les dossards par groupements, catégories, classes avec des cases à cocher dans un menu dédié...
- dans les paramètres, permettre de changer l'option : "statistiques en % ou en effectifs".
- import depuis un fichier xlsx à implémenter en plus du CSV (priorité faible)
- Ajouter un mode sombre via l'interface (case à cocher) pour utiliser la css mode-sombre. 

- segmenter le code pour séparer les classes de données (AVANT DE DIFFUSER REELLEMENT LE LOGICIEL)
- anonymer la documentation en faisant un import SIECLE avec des noms bidons et de nouvelles captures d'écrans.
- Créer un système évitant des incohérences entre les smartphones et la base locale : 
un numéro de course unique qui empêcherait toute communication tant que les données n'ont pas été coordonnées ou celles du smartphone effacées.
A réfléchir...
