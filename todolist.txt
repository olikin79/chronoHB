
EVOLUTION pour le cross départemental :
- piques à rendre fonctionnelles.
Chercher dans decodeActionsRecupSmartphone() appelé ligne 1853 de FonctionsMetiers.py pourquoi cela semble sans effet.
Dans AI2, dans l'idéal, il faudrait que si pique=true, constructeurRequeteHTTP soit appelé avec le dossard qui précède celui en cours d'ajout, sauf pour le premier envoi.
A défaut, traité dans la fonction python d'import du fichier de données "pique". Par contre, il faut trouver pourquoi l'uid est 0.
Cela devrait être un nombre aléatoire.
- export vers OPUSS
- tester l'import depuis un google sheet et vérifier qu'il est fonctionnel (import du trail du randon à creuser).


EVOLUTIONS DEMANDEES POUR LES TRAILEURS DU RANDON :
- générer un pdf avec 6 qrcodes par page.
- faire en sorte qu'un coureur d'une catégorie puisse s'inscrire à n'importe quelle course, de distances différentes.
Ce ne serait plus la catégorie qui donnerait la course mais une propriété (à créer) du coureur.
Dans les paramètres, une checkbox permettrait de choisir "courses en fonction des catégories ou non".
Un champ Entry apparaîtrait en cas de choix "courses manuelles" qui engendrerait l'apparition d'un combobox dans ajout-modif de coureur lié à une propriété
Coureur.course, qui pourrait être importée via le tableur ou CSV.
Dans le menu "paramètres des courses", la partie gauche disparaîtrait, la partie droite prendrait alors en compte ce nouveau paramètre.



Todolist pour le cross HB 2023 :
- FAIT : le temps sur le diplome s'affichera en min:sec et non en HH:MM:SS.
- FAIT envoi programmé pour les deux adresses si présentes.
- FAIT envoi des emails depuis deux adresses google.
- FAIT : depot vers serveur sftp
- FAIT : absents dispenses cumulables
- FAIT : VMA sur le diplome.
- FAIT : suppression d'un dossard arrivé non fonctionnelle !
- FAIT : les noms des catégories débordaient de l'affichage. Corrigé.
- FAIT : les noms des classes ne devrait pas être des float

- tester tous les boutons des interfaces pour vérifier le fonctionnement.
	- FAIT : challenges non fonctionnels ?
	- FAIT : suppression des dossards depuis l'interface non effective. Fonctionnel.
	- FAIT : cases absents-dispensés à la verticale.
	- FAIT : dans le pdf d'une classe, remettre le tri alphabétique.
	- FAIT : pdf de statistiques non fonctionnel
	- FAIT : chronomètre non fonctionnel si course en cours.
	- FAIT : possibilité de s'envoyer un diplome de test via le menu.
	- FAIT : ne recalcule pas les rangs quand je supprime un dossard de la ligne d'arrivée.
	- FAIT : le total des participants sur le diplôme ne tenait compte que des arrivées de la course et non de tous ceux qui ont pris le départ (ni absents, ni dispensés)
- FAIT : arrondi de la vitesse à l'unité (pour gagner de la place)
- FAIT : configurer la borne wifi pour étendre le réseau lax de mon téléphone.
- FAIT : l'accès HTTP aux pages synology.me ne semble pas fonctionner sur safari.
- élève en plus à créer Julien Mezy 6ème G => imprimer dossard.


Moins urgent :
- COMMENCE : affichage actualisé non défilant. Supprimer le chronométrage qui ne s'actualise pas pour l'instant.
- deplacer les fichiers du serveur web dans www
- nouveaux paramètres à ajouter dans l'interface : FTP, diplômes, etc...
- lors du premier dépôt FTP, il faudrait envoyer le dossier media et les images utiles (médailles)

Dès que possible : 
- bug si import sans date de naissance alors que cela ne devrait pas être indispensable pour le cross du collège.



Manque pour la branche trail-rieutort :
- créer une fonction qui nettoie les courses manuelles (en supprimant les courses sans participant puis réindexation des nomStandard), actionnée par un bouton dédié.
utiliser delCourse() en vérifiant que celle-ci fait bien le ménage dans les groupements.listeDesCourses.
- tester toute la suite : impression des dossards, déroulement des courses,...


Todolist pour version 1.8 (mai 2023) :

A tester suite trail Rieutort :
- plusieurs imports successifs ne semblent pas avoir le bon comportement. Certains coureurs sont actualisés (alors qu'ils n'ont pas changé).


Bugs détectés :
- non application des paramètres renseignés, sauf à relancer l'application. A Trouver.
- les paramètres des boutons radio (type de course,...) ne sont pas mémorisés immédiatement 
(ni appliqués du coup : cases à cocher non prises en compte sans redémarrage de l'application)).
- le bind sur la saisie dans un champ Entry ne s'exécute qu'à la sortie de ce champ et non à chaque caractère saisi.
Si on ne quitte pas le champ, la valeur n'est pas mémorisée en mémoire. Exemple pour les noms de course personnalisés.
- (confirmé) : l'archivage contient-il les vidéos ? on dirait que non!
- l'application android semble renvoyer la dernière action vers le serveur à chaque fois que l'on revient dans un des deux menus.
Le serveur la traite comme un doublon grace à l'UID unique lié à la communication. Cela n'a donc aucune incidence en pratique.
Si un jour, j'ai du temps, autant supprimer ce problème.
- bug hyper rare détecté le 16/10/23 : il faut affecter un dossard à un temps puis tenter de reculer ce dossard. Cela crée une exception non gérée.
A creuser si du temps. Solution : redémarrer le programme, supprimer le temps en double généré. Faire plutôt "avancer" l'autre temps avec lequel 
la permutation est souhaitée. Cela fonctionne dans l'autre sens.



Fonctionnalités :
- ajouter les paramètres généraux, déjà documentés : 
	* relatifs à l'envoi automatique de diplomes, les logins et mdp d'emails, le nombre de minutes de rétention avant l'envoi des diplomes.
	* relatifs à l'affichage TV automatique ?
	* relatifs au dépôt FTP pour site web en temps réel. (rajouter le lien dans le mail diffusé)
- refaire les captures d'écran p5 de la documentation.
- tester-simuler les conditions d'échec d'envoi d'un mail avec le diplome. Améliorer éventuellement la détection d'erreur.

Si possible pour la 1.8 :
- processus de mise à jour testé, permettant de remplacer n'importe quel fichier de chronoHB même si non encore utilisé et non implémenté.
- import + export en .chb des fichiers de données.
- variable "message dans le mail" : bravo pour ta participation !


Documentation :
- documenter : double authentification google.com + mot de passe d'application.
- documenter l'inscription en ligne via formulaire google form.
- documenter l'import avec le numéro de dossard fourni.


Trouver win32ui installation. https://stackoverflow.com/questions/42370339/python-3-6-install-win32api

#####################################################

Todolist pour version 1.9 (oct 2023) :

Bugs détectés :
- (très improbable, peut être reporté): 
importer les fichiers de données venant des smartphones en parallèle en fonction de l'heure d'arrivée sur le serveur de l'information.
Cela permettra d'obtenir forcément les mêmes données après réimport ou reboot du logiciel.

- Selon la taille des noms des catégories, les cases à cocher pour l'affichage TV débordent de l'écran. Faire en sorte que cela soit adaptatif.
Créer un affichage qui dépend de la longueur totale à afficher avec retour à la ligne.
Actuellement, on coupe en deux lignes les combobox. Il faudrait pouvoir faire plus de deux lignes en fonction de la largeur de 
la fenêtre parent en pixels.


- vérifier que le classement s'effectue à l'intérieur d'une catégorie : un M2 n'est pas en concurrence avec un M3, etc... Surtout pour le Randon Trail.

Fonctionnalités :
- Inscription en ligne avec case à cocher : trouver un moyen de cacher périodiquement les lignes "payées" 
et de pouvoir "tout afficher" avec une case à cocher, qui restera toujours visible.
Ainsi, les opérateurs ne voient que les dossards qui restent à donner.
- Inscription en ligne : envoi d'un email automatique aux inscrits avec leur numéro de dossard, la couleur et l'indication "Donner votre nom et indiquez que vous avez le dossard "23 vert".

Fonctionnalités :
- Installation automatique de l'ensemble dont extensions installées localement.
- Faire en sorte que l'import de dossards depuis un autre smartphone soit automatiquement considéré comme une autre pic.
Chaque smartphone sera considéré comme une pix différente. Le premier smartphone à envoyer des données sera la pic de base importée
ArriveesDossards sera complété par des propriétés et méthodes  :
La documentation spécifiera que : le premier dossard scanné avec un smartphone "pic" (qui n'est pas celui de base) devra être :
* un dossard (quelconque du smartphone principal)
* ou le dernier dossard d'un autre smartphone "pic".
Le dernier dossard d'un smartphone "pic" devra être :
* un dossard (quelconque du smartphone principal) : auquel cas, tous les dossards du smartphone "pic" s'insèrent dans la liste.
* le premier dossard d'un smartphone "pic"
Ainsi, on pourra utiliser les pics pour intercaler au milieu des scans du smartphone principal 
ou pour enchainer les smartphones (si panne de batterie ou autre)

- Le status dispensé ou absent devrait être cumulable : élimination du combobox et utilisation de cases à cocher.
Attention à répercuter ces éventuels deux status dans les pdf générés et dans le tableur xls si tel est le cas.
La class Coureur() permet déjà le cumul, je pense...

- changer les fichiers textes avec une extension comme .dbc (pour db de chronoHB) afin d'ignorer dans GIT tous les fichiers chb... Plus pratique !



Fonctionnalités pour le cross UNSS :
- créer une méthode pour récupérer le numéro d'AS de chaque coureur (à partir de son numéro de licence). 
Cela devrait permettre un export (copier-coller) vers OPUSS de la forme (combien de qualifiés par catégorie ?):
1	14771	1	6 pts (1+2+1+2+0)	Q
2	14771	2	14 pts (3+4+3+4+0)	Q
3	14785		28 pts (8+9+5+6+0)	
4	14758		30 pts (6+7+8+9+0)	

...
Voir à quoi correspond le Q.
- pour l'UNSS, export par établissement avec les catégories distinguées dans des tableaux divers du même pdf.
- export vers OPUSS à créer à partir d'un modèle.
- pour un cross UNSS, dans le tableau de l'affichage TV, la colonne "établissement" n'est pas assez large.



#####################################################

A tester dans chronoHB :
- vers la ligne 3203 de chronoHB.pyw, chercher le commentaire "### A tester..." : 
il faudra tester le menu d'ajout de coureur pour les quatre types de catégories d'âge (0, 1 en mode manuel ou automatique et 2) afin 
de vérifier que les critères de validation d'une saisie soient corrects et que les boutons s'affichent pour toutes les saisies correctes
et uniquement celles-ci.


Retour suite au trail de Randon :
- Améliorer le fichiers LOG d'import en mettant mieux en évidence les erreurs par rapport aux imports réussis.
- voir pourquoi la vitesse de défilement n'est pas uniforme : 
pour une vitesse fixée, quand il y a peu de gens, cela défile vite et quand il y a plus de monde, cela défile plus doucement.
A creuser pour obtenir une vitesse uniforme.


Dernière idées en vrac :
- créer un export html qui ne défile pas, à onglets
- créer un export ftp pour des résultats en temps réel sur internet.


Pour déploiement du logiciel sur d'autres ordinateurs et maintenance automatique :
- mettre au point script de mise à jour de chronoHB.
- créer un système web avec base de donnée permettant de valider une installation sur un poste : 
	* création d'un identifiant unique associé au poste (associé à l'adresse MAC de la carte réseau et à un code unique : md5 de la concaténation des deux ?)
	* création d'une page de validation de l'installation : la requête contiendrait le code à usage unique et lUUID unique (adresse mac par exemple).
	La page en question valide le code (si présent dans la BDD sans adresse mac) et invalide celui-ci si adresse mac déjà renseignée.
	* possibilité de désinstaller le logiciel d'un poste pour le copier sur un autre en recrédidant le compte via une requête particulière.
- au lancement, vérifie que l'installation de chronoHB est valide (via internet). Mémorise la date de la dernière vérification.
Voir quelle période de sursis on laisse sans accès au web ? 1 an ? Signaler dans la documentation ce délai
Si l'accès à internet n'est pas fonctionnel, signale le délai restant au lancement.
Si délai dépassé, introduit des restrictions pour mode démo (20 coureurs dans la base et passent la ligne max). Tous les autres menus actifs et fonctionnels.

	


DEVELOPPEMENTS :
MOYENNEMENT PRIORITAIRES :
- trouver pourquoi une erreur est généré par setARegenererPourImpression() , liée à l'usage des noms standards en arrière plan (rendue non bloquante)

- moyen de déploiement de mises à jour de chronoHB sur des postes déjà déployés.

- rendre scrollable les frames d'impressions de dossards individuelles ou des absents-dispensés.

- sur le smartphone, quand un dossard a déjà été scanné, il faudrait pouvoir supprimer facilement toutes les occurences précédentes.
Cela se produit quand un dossard est scanné par erreur puis supprimé sur le serveur chronoHB. Ensuite, quand on doit le scanner pour de vrai, 
c'est bloquant. Il faudrait "sortir du mode scan si on y est / afficher un message "voulez vous supprimer le scan précédent de ce dossard ? OUI / NON"
puis agir si besoin puis revenir à l'écran classique.

- (à tester) : la compatibilité ascendante avec d'anciennes sauvegardes à tester. Pas assurée... 
Exemple : réimport du cross HB 2022 dans la version 1.62



DEVELOPPEMENTS NON PRIORITAIRES :
- FONCTIONNELS :
- l'optimisation de la non regénération des pdf n'a pas lieu pour les courses manuelles. Il faudrait reprendre la ligne env .2575 de generateImpressions()
casOuOnSupprime = (aSupprimer) \
                          or (nomFichierPdfDecoupe[0] == "Categorie" and Courses[nomFichierPdfDecoupe[1]].aRegenererPourImpression) \
                          or (nomFichierPdfDecoupe[0] == "Groupement" and groupementAPartirDeSonNom(Courses[nomFichierPdfDecoupe[1]].nomGroupement, nomStandard = True).aRegenererPourImpression) \
                          or nomFichierPdfDecoupe[0] == "Challenge" or nomFichierPdfDecoupe[0]=="statistiques"
et utiliser le nom au lieu du nom standard... Quelle incidence sur le reste ?




- ULTRA-PEU-PROBABLE (ignoré lors de l'implémentation de l'UNSS) :
	* si on est en présence d'une course UNSS, qu'il n'y a que des cadets G et des juniors F (ou l'inverse), le challenge Lycée ne sera pas créé.
Cela ne peut pas survenir vu qu'il y a toujours des cadets, cadettes, juniors et juniores sur une compétition UNSS.
S'il n'y a que des cadets et cadettes, tout fonctionne (idem si juniors et juniores).
Compliqué de gérer ce cas improbable en pratique, vu que le challenge lycée regroupe les catégories CA et JU, qui peuvent être filles ou
garçons et que son nom ne correspond pas aux catégories officielles des courses courues.

	* si on est en présence d'une course UNSS, qu'un coureur M10 (vétéran dernière catégorie) courre avec les jeunes de lycée, 
alors celui-ci pourra entrer dans n'importe quel challenge sans limitation. Cela vient du fait que M10 comporte 3 caractères contrairement à
toutes les catégories. Pas créé de cas particulier pour cette éventualité (qui ne peut pas survenir en pratique).


- ESTHETIQUE :
	* si on annule toutes les courses, le menu "Annuler" ne disparaît pas. Esthétique !
	* dans le pdf qui affiche les résultats d'un groupement, quand la colonne vitesse n'est pas assez large,
	( cas où il y a la vitesse et la VMA ),  les éléments ne sont pas centrés correctement.
	* la droiteFrame devrait être munie d'un scroll haut-bas afin de gérer le cas où les éléments affichés sont trop nombreux. 
	Non réussi avec la class dérivée de Frame présente en début de code de chronoHB.py
	* si un temps est entre minuit et 1H, lors de la fermeture de l'application, le temps affiché est incorrect.
	Aucun impact sur les temps calculés et les statistiques. 
	Impact sur l'affichage TV sur le chronomètre en temps réel affiché en haut ? A vérifier.
	Exemple : 00:44:20:34 devient, après fermeture puis ouverture de l'application 44:20:34.

	


A TESTER :




FONCTIONNALITES MANQUANTES OU EVOLUTIONS dans chronoHB.py à plus long terme :

- remplacer l'usage de xlswriter par openpyxl lors de l'export => possibilité d'éliminer cette dépendance.
- mise en page du tableau par catégories dans les statistiques : inutile de distinguer le sexe dans deux colonnes.
Cela a sa raison d'être pour les groupements ou pour les classes (qui sont dans Resultats, à maintenir) mais pas pour les catégories (également dans Résultats).
- accepter la pondération pour les challenges par classe.
- le défilement automatique de MonTableau ne s'effectue que par blocs de 2 lignes.
- trouver les différentes fonctions d'actualisation de l'interface GUI. Il semble y avoir 3 qui font sûrement doublon. A réfléchir.
Source d'incompréhension en cas de bizarreries d'affichage potentielles. Pas de bug constaté pour l'instant.
- prévoir une procédure en cas de plantage au démarrage lié à une base de données incorrecte.
try : except : dans le traitement des données afin d'éviter une interface plantée comme ci-après :
Traceback (most recent call last):
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1866, in <module>
    timer=Clock(root, "tableau.maj")
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1765, in __init__
    self.update_clock()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\chronoHB.py", line 1776, in update_clock
    traitementLocal = traiterDonneesLocales()
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1162, in traiterDonneesLocales
    codeErreur = decodeActionsRecupSmartphone(ligne, local=True)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 1231, in decodeActionsRecupSmartphone
    retour = addArriveeDossard(dossard, dossardPrecedent)
  File "C:\Users\olikin\Documents\GitHub\chronoHB\FonctionsMetiers.py", line 2747, in addArriveeDossard
    coureur = Coureurs[doss-1]
IndexError: list index out of range

Devrait lancer recupererSauvegardeGUI() en cas de plantage afin de charger une base correcte.


A ENCORE PLUS LONG TERME : quelques idées en vrac.
- permettre d'afficher sur la TV les vidéos : dans la zone d'affichage, développer un combobox qui affichera
les noms des dossards concernés (théoriquement) par un enregistrement qu'il serait possible de cocher pour diffusion sur la TV.
Placer cette diffusion au tout début de la page web, avant les tableaux. Cela permettrait de palier toute demande 
de vérification et de laisser les coureurs concernés loin des installations.
- faire en sorte que les numéros de la première colonne du tableauGUI soient systématiquement avec le bon nombre de chiffres
(interne à la class tableauGUI) si moins de 100 résultats : à deux chiffres. Si moins de mille résultats, à trois chiffres, etc...
Ainsi, quand on effectue un tri par colonne, actuellement, j'ai mis 3 chiffres tout le temps. Développement court qui devra se baser sur la méthode formateSurNChiffres() 
en déterminant le nombre total de lignes et on l'appliquant à posteriori à tout le tableau quand ce total dépassera 100, 1000, etc...
- dans ajout manuel de coureur, la classe devrait être une liste combobox avec les classes précédentes mais permettant de saisir une nouvelle classe.
- pouvoir choisir l'imprimante vers laquelle on imprime dans les paramètres.
- quand MonTableau contient plus de 10 colonnes, impossible d'éditer une cellule au delà de la 10ème : problème de base 16 à convertir en base 10 (ou l'inverse, car écrit de mémoire...)
(Inutile en l'état actuel des besoins)
- l'affichage.html pourrait être exporté à chaque actualisation vers un serveur ftp sur le web (identifiants+mdp+adresse à renseigner dans les paramètres).
Ainsi, n'importe quel autre ordintateur relié à internet, plus lointain (sans wifi), pourrait afficher les résultats.
Actuellement, il faut que le deuxième ordinateur soit sur le même réseau wifi pour afficher la page http://ip-serveur-chronoHB/Affichage.html .
- si la génération des dossards (ou des résultats ou du xlxs) échouent, c'est probablement lié à un fichier ouvert dans adobe reader ou excel. 
	Inviter l'utilisateur à fermer ces logiciels par un pop-up.
- dans les paramètres, permettre de changer l'option : "statistiques en % ou en effectifs".
- Ajouter un mode sombre via l'interface (case à cocher) pour utiliser la css mode-sombre. 
- segmenter le code pour séparer les classes de données (AVANT DE DIFFUSER REELLEMENT LE LOGICIEL)
- Créer un système évitant des incohérences entre les smartphones et la base locale : 
un numéro de course unique qui empêcherait toute communication tant que les données n'ont pas été coordonnées ou celles du smartphone effacées.
A réfléchir...
